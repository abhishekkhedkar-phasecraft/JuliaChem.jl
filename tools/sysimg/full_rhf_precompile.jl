precompile(Tuple{typeof(Base.similar), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{typeof(Lz4_jll.__init__)})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Zstd_jll.__init__)})
precompile(Tuple{typeof(Blosc_jll.__init__)})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.foreach), Blosc_jll.var"#7#9", Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), Blosc_jll.var"#8#10", Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Blosc.__init__)})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(nghttp2_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(LibSSH2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), LibSSH2_jll.var"#7#9", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), LibSSH2_jll.var"#8#10", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(LibCURL_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), LibCURL_jll.var"#10#12", Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), LibCURL_jll.var"#11#13", Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(HDF5_jll.__init__)})
precompile(Tuple{typeof(HDF5.blosc_set_local), Int64, Int64, Int64})
precompile(Tuple{typeof(HDF5.blosc_filter), UInt32, UInt64, Ptr{UInt32}, UInt64, Ptr{UInt64}, Ptr{Ptr{Nothing}}})
precompile(Tuple{typeof(HDF5.__init__)})
precompile(Tuple{typeof(Base.iterate), Int64})
precompile(Tuple{typeof(HDF5.h5p_set_char_encoding), HDF5.Properties, Int64})
precompile(Tuple{typeof(HDF5.h5p_set_create_intermediate_group), HDF5.Properties, Int64})
precompile(Tuple{typeof(Base.get!), Type{Array{Function, 1}}, Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(MPI.__init__)})
precompile(Tuple{typeof(MPI.Get_library_version)})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{HDF5.var"#57#60"})
precompile(Tuple{HDF5.var"#58#61"})
precompile(Tuple{HDF5.var"#59#62"})
precompile(Tuple{Requires.var"#@include", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.read), String})
precompile(Tuple{typeof(Requires._include_path), String})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{typeof(HDF5.include), String})
precompile(Tuple{typeof(Libdl.dlopen), Function, String})
precompile(Tuple{Libdl.var"##dlopen#4", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Libdl.dlopen), HDF5.var"#82#83", String})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Int64, Int64}})
precompile(Tuple{DocStringExtensions.var"#29#30"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(libcxxwrap_julia_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{Pkg.Artifacts.var"#ensure_artifact_installed##kw", NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{Pkg.Artifacts.var"##ensure_artifact_installed#42", Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{Pkg.Artifacts.var"##query_override#7", Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.__init__)})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.checkversion)})
precompile(Tuple{typeof(CxxWrap.StdLib.__init__)})
precompile(Tuple{typeof(Libdl.dlsym), Ptr{Nothing}, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{CxxWrap.CxxWrapCore.CppFunctionInfo, 1}})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore._register_function_pointers), CxxWrap.CxxWrapCore.CppFunctionInfo, Bool})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.methodkey), CxxWrap.CxxWrapCore.CppFunctionInfo})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore._module_name_hash), Module, UInt64})
precompile(Tuple{typeof(Base.iterate), Array{CxxWrap.CxxWrapCore.CppFunctionInfo, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Tuple{Symbol, Symbol, Symbol, UInt64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Tuple{Symbol, Symbol, Symbol, UInt64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore._get_function_pointer), Tuple{Symbol, Symbol, Symbol, UInt64}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}, 1}, Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Tuple{Symbol, Symbol, Symbol, UInt64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(JuliaChem.JERI.__init__)})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{JuliaChem.JCModules.Atom}})
precompile(Tuple{typeof(Base.allocatedinline), Type{JuliaChem.JCModules.Shell}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{Base.Cartesian.var"#@nloops", LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{Base.var"##s91#155", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:swmr,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64})
precompile(Tuple{StaticArrays.var"##s173#184", Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#185#186", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#185#186"}})
precompile(Tuple{StaticArrays.var"##s37#6", Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), StaticArrays.var"#7#8", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3}}})
precompile(Tuple{Base.Cartesian.var"#@nexprs", LineNumberNode, Module, Int64, Expr})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StackTraces.StackFrame, Int64}}})
precompile(Tuple{Base.var"##s828#449", Any, Any, Any, Any, Any, Any})
precompile(Tuple{Base.Cartesian.var"#@ntuple", LineNumberNode, Module, Int64, Any})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Vararg{Expr, N} where N})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr, Vararg{Expr, N} where N})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Tuple{Int64, Int64, Int64, Int64}, Symbol}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{StaticArrays.var"##s37#12", Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{StaticArrays.var"##s37#2", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{1}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{12}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{12}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{12}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{12}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{24}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{24}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{24}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{24}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{MPI.Status}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Float64}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, Float64}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Float64}, Base.Pair{String, Bool}}}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{1}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Main.full_rhf), String})
precompile(Tuple{Distributed.var"#133#134"})
precompile(Tuple{MPI.var"#19#20"{Int32, MPI.Info}})
precompile(Tuple{MPI.var"#22#23"{Int32, MPI.Comm}})
precompile(Tuple{MPI.var"#32#33"{Int32, MPI.Datatype}})
precompile(Tuple{MPI.var"#59#60"{Int32, MPI.Op}})
precompile(Tuple{MPI.var"#69#70"{Int32, MPI.Request}})
precompile(Tuple{MPI.var"#83#84"{Int32, MPI.Win}})
precompile(Tuple{MPI.var"#88#89"{Int32, MPI.FileHandle}})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, Int64})
precompile(Tuple{JSON.Parser.var"##parse#1", Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Float64, String})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Array{Any, 1}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Array{Any, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Int64}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{String, Any}, String})
precompile(Tuple{JuliaChem.JCBasis.var"#run##kw", NamedTuple{(:output,), Tuple{String}}, typeof(JuliaChem.JCBasis.run), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{HDF5.var"##h5open#10", Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HDF5.h5open), JuliaChem.JCBasis.var"#4#7"{String, MPI.Comm, Array{String, 1}, String, Base.Dict{String, Int64}, Base.Dict{String, Int64}, JuliaChem.JCModules.Molecule, Array{JuliaChem.JCModules.Shell, 1}, CxxWrap.StdLib.StdVectorAllocated{CxxWrap.StdLib.StdVector{JuliaChem.JERI.Shell}}, Array{Bool, 1}, Array{Array{Float64, 1}, 1}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.Shell}})
precompile(Tuple{HDF5.var"#h5open##kw", NamedTuple{(:swmr,), Tuple{Bool}}, typeof(HDF5.h5open), String, String})
precompile(Tuple{typeof(HDF5.h5p_set_fclose_degree), HDF5.Properties, Int64})
precompile(Tuple{typeof(Base.push!), CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.Atom}, JuliaChem.JERI.AtomAllocated})
precompile(Tuple{typeof(Base.read), HDF5.Group})
precompile(Tuple{typeof(HDF5.get_mem_compatible_jl_type), HDF5.Datatype})
precompile(Tuple{typeof(Base.read), HDF5.Dataset, Type{Float64}})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, UInt64})
precompile(Tuple{typeof(HDF5.dataspace), Array{Float64, 1}})
precompile(Tuple{typeof(HDF5.h5d_read), HDF5.Dataset, HDF5.Datatype, HDF5.Dataspace, HDF5.Dataspace, HDF5.Properties, Array{Float64, 1}})
precompile(Tuple{typeof(Base.close), HDF5.Dataspace})
precompile(Tuple{typeof(Base.read), HDF5.Dataset, Type{HDF5.FixedString{1, 0}}})
precompile(Tuple{Type{Array{HDF5.FixedString{1, 0}, N} where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(HDF5.dataspace), Array{HDF5.FixedString{1, 0}, 1}})
precompile(Tuple{typeof(HDF5.h5d_read), HDF5.Dataset, HDF5.Datatype, HDF5.Dataspace, HDF5.Dataspace, HDF5.Properties, Array{HDF5.FixedString{1, 0}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{HDF5.FixedString{1, 0}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(HDF5.normalize_types), Tuple{Array{HDF5.FixedString{1, 0}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(HDF5.normalize_types), Tuple{Array{HDF5.FixedString{1, 0}, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(HDF5.normalize_types), Tuple{Array{HDF5.FixedString{1, 0}, 1}}}})
precompile(Tuple{typeof(Base.close), HDF5.Datatype})
precompile(Tuple{typeof(Base.close), HDF5.Properties})
precompile(Tuple{typeof(Base.close), HDF5.Dataset})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), JuliaChem.JERI.AtomAllocated})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(HDF5.normalize_types), Tuple{Base.Broadcast.Extruded{Array{HDF5.FixedString{1, 0}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(HDF5.normalize_types), Tuple{Base.Broadcast.Extruded{Array{HDF5.FixedString{1, 0}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Float64, 1}, String})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, UInt64, UInt64})
precompile(Tuple{typeof(HDF5.dataspace), Array{Float64, 2}})
precompile(Tuple{typeof(HDF5.h5d_read), HDF5.Dataset, HDF5.Datatype, HDF5.Dataspace, HDF5.Dataspace, HDF5.Properties, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Float64, 2}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, N} where N}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:formatters,), T} where T<:Tuple}, Tuple{PrettyTables.var"#31#33"{Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:formatters,), Tuple{PrettyTables.var"#31#33"{Array{String, 1}, Array{Int64, 1}}}}, typeof(PrettyTables.pretty_table), Array{Float64, 2}, Array{String, 2}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Base.Pair{Symbol, Bool}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:formatters,), Tuple{PrettyTables.var"#31#33"{Array{String, 1}, Array{Int64, 1}}}}, typeof(PrettyTables._pretty_table), Base.IOContext{Base.TTY}, Array{Float64, 2}, Array{String, 2}})
precompile(Tuple{typeof(Base.close), HDF5.Group})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, PrettyTables.var"#59#63"}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, PrettyTables.var"#60#64"}, Int64})
precompile(Tuple{Type{PrettyTables.PrintInfo}, Array{Float64, 2}, Array{String, 2}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Int64, Int64, Int64, Int64, Bool, String, Bool, Nothing, Symbol, String, Array{Symbol, 1}, Tuple{}, Tuple{PrettyTables.var"#31#33"{Array{String, 1}, Array{Int64, 1}}}, Bool, String, Symbol, Array{Symbol, 1}, Tuple{}, Bool, Base.Val{:print}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Bool}})
precompile(Tuple{Type{NamedTuple{(:has_color,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:has_color,), Tuple{Bool}}, Type{PrettyTables.Display}})
precompile(Tuple{typeof(Base._array_for), Type{Crayons.Crayon}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Crayons.Crayon, 1}, Crayons.Crayon, Base.Generator{Base.UnitRange{Int64}, PrettyTables.var"#97#101"}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Crayons.Crayon, 1}, Crayons.Crayon, Base.Generator{Base.UnitRange{Int64}, PrettyTables.var"#98#102"}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Int64, Bool, Bool, Bool, Base.Val{:print}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(PrettyTables._fill_matrix_data!), Array{String, 2}, Array{Int64, 2}, Array{Array{String, 1}, 2}, Array{Array{Int64, 1}, 2}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Array{Int64, 1}, Array{Float64, 2}, Array{String, 2}, Tuple{PrettyTables.var"#31#33"{Array{String, 1}, Array{Int64, 1}}}, PrettyTables.Display, Bool, Bool, Bool, Bool, Array{Bool, 1}, Bool, Array{Int64, 1}, Bool, Base.Val{:print}, Symbol})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.escape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{PrettyTables.var"#31#33"{Array{String, 1}, Array{Int64, 1}}, Float64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :linebreaks, :renderer), T} where T<:Tuple}, Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Base.Val{:print}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Float64})
precompile(Tuple{Base.var"##sprint#355", Base.Pair{Symbol, Bool}, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{Int64, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{Int64, 1}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Function}, String})
precompile(Tuple{Printf.var"#@sprintf", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Function}, Function, String})
precompile(Tuple{Formatting.var"#1#4", Float64})
precompile(Tuple{Formatting.var"#11#12", Float64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Int64})
precompile(Tuple{typeof(Base.in), Int64, Base.Set{Any}})
precompile(Tuple{typeof(Base.isequal), Int64, Int64})
precompile(Tuple{Type{Array{Int64, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.println), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{typeof(PrettyTables._print_table_header!), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Array{String, 2}, Array{String, 2}, Array{Int64, 2}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Tuple{}, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Array{Crayons.Crayon, 1}, Array{Crayons.Crayon, 1}, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(PrettyTables._print_table_data), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Array{Float64, 2}, Array{Array{String, 1}, 2}, Array{Array{Int64, 1}, 2}, Array{Int64, 1}, Array{Int64, 1}, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Tuple{Int64, Int64, Int64, Int64}, Symbol}, 1}, Array{Union{Int64, Symbol}, 1}, Array{Symbol, 1}, Tuple{Char, Char, Char, Char}, Tuple{}, Symbol, Int64, Tuple{}, Bool, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Base.reshape), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{Type{JuliaChem.JCModules.Shell}, Int64, Int64, Int64, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Int64, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, N} where N}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Function, Int64})
precompile(Tuple{Type{JuliaChem.JERI.BasisSet}, CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.Atom}, CxxWrap.StdLib.StdVectorAllocated{CxxWrap.StdLib.StdVector{JuliaChem.JERI.Shell}}})
precompile(Tuple{typeof(JuliaChem.JERI.precompute_shell_pair_data), CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.ShellPair}, JuliaChem.JERI.BasisSetAllocated})
precompile(Tuple{typeof(Base.println), Base.TTY, Int64})
precompile(Tuple{typeof(Base.println), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, Float64})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), JuliaChem.JERI.ShellAllocated})
precompile(Tuple{JuliaChem.JCRHF.Energy.var"#run##kw", NamedTuple{(:output,), Tuple{String}}, typeof(JuliaChem.JCRHF.Energy.run), JuliaChem.JCModules.Molecule, JuliaChem.JCModules.Basis, Base.Dict{String, Any}})
precompile(Tuple{Type{JuliaChem.JERI.OEIEngine}, CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.Atom}, JuliaChem.JERI.BasisSetAllocated, Int64})
precompile(Tuple{typeof(Printf.print_fixed), Base.TTY, Int64, Int32, Int32, Bool, Array{UInt8, 1}})
precompile(Tuple{Type{JuliaChem.JERI.TEIEngine}, JuliaChem.JERI.BasisSetAllocated, CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.ShellPair}})
precompile(Tuple{JuliaChem.JCRHF.Energy.var"#10#14"{Int64, Array{Array{Float64, 2}, 1}, Array{Float64, 2}, Array{Float64, 2}, JuliaChem.JCModules.Basis, Array{Float64, 2}, Array{Float64, 2}, Array{Array{Float64, 1}, 1}, Float64, Bool, Int64, Int64, Base.Threads.Atomic{Int64}}})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, Int32})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Float64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Float64}, Tuple{Base.Pair{String, Float64}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, Float64}}}, Int64})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), JuliaChem.JERI.TEIEngineAllocated})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), JuliaChem.JERI.OEIEngineAllocated})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Float64}, Type{String}, Type{Real}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Real}, Base.Dict{String, Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Real}, Bool, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Real}, Tuple{Base.Pair{String, Float64}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, Float64}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Real}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Real}})
precompile(Tuple{typeof(Base.convert), Type{Real}, Float64})
precompile(Tuple{typeof(Base.convert), Type{Real}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Float64}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Float64}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, Float64}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Float64, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Bool, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{String, Float64}, String})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Float64, 2}}, Array{Float64, 2}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Array{Float64, 2}}, Tuple{Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Float64}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Array{Float64, 2}}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Array{Float64, 2}}, Base.Pair{String, Float64}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{JuliaChem.JCProperties.var"#run##kw", NamedTuple{(:output,), Tuple{String}}, typeof(JuliaChem.JCProperties.run), JuliaChem.JCModules.Molecule, JuliaChem.JCModules.Basis, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{Type{JuliaChem.JERI.PropEngine}, CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.Atom}, JuliaChem.JERI.BasisSetAllocated})
precompile(Tuple{typeof(Base._atexit)})
precompile(Tuple{typeof(MPI._finalize)})
precompile(Tuple{Blosc.var"#1#2"})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), JuliaChem.JERI.PropEngineAllocated})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.ShellPair}})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), JuliaChem.JERI.BasisSetAllocated})
precompile(Tuple{typeof(Base.close), HDF5.File})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), CxxWrap.StdLib.StdVectorAllocated{CxxWrap.StdLib.StdVector{JuliaChem.JERI.Shell}}})
precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), CxxWrap.StdLib.StdVectorAllocated{JuliaChem.JERI.Atom}})
